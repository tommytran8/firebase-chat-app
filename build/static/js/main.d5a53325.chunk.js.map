{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","auth","firestore","Filter","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","dummy","useRef","filter","sendMessage","e","a","preventDefault","uid","photoURL","add","text","isProfane","clean","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","message","id","ref","onSubmit","value","onChange","target","type","disabled","ChatMessage","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ulBAkBIA,EAAQ,IAPVC,E,EAAAA,OACAC,E,EAAAA,WACAC,E,EAAAA,UACAC,E,EAAAA,cACAC,E,EAAAA,kBACAC,E,EAAAA,MACAC,E,EAAAA,cAGFC,IAASC,cAAc,CACrBR,OAAQA,EACRC,WAAYA,EACZC,UAAWA,EACXC,cAAeA,EACfC,kBAAmBA,EACnBC,MAAOA,EACPC,cAAeA,IAGjB,IAAMG,EAAOF,IAASE,OAChBC,EAAWH,IAASG,YAEpBC,EAASZ,EAAQ,IAkBjBa,EAAS,WAKb,OACE,mCACE,wBAAQC,QANa,WACvB,IAAMC,EAAW,IAAIP,IAASE,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAInB,oCAMAG,EAAU,WACd,OAAOR,EAAKS,aACV,wBAAQL,QAAU,kBAAMJ,EAAKU,WAA7B,uBAIEC,EAAW,WACf,IAAMC,EAAcX,EAAUY,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAFjC,EAIDC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAJa,sBAKcC,mBAAS,IALvB,mBAKbC,EALa,KAKFC,EALE,KAMdC,EAAQC,mBAERC,EAAS,IAAIvB,EAEbwB,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKS,YAAvBqB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZnB,EAAYoB,IAAI,CACpBC,KAAMR,EAAOS,UAAUb,GAAaI,EAAOU,MAAMd,GAAaA,EAC9De,UAAWtC,IAASG,UAAUoC,WAAWC,kBACzCR,MACAC,aATgB,OAWlBT,EAAa,IAEbC,EAAMgB,QAAQC,eAAe,CAACC,SAAU,WAbtB,2CAAH,sDAgBjB,OACE,qCAEE,iCACGtB,GAAYA,EAASuB,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAA0BC,QAASD,GAAjBA,EAAIE,OACvD,qBAAKC,IAAKvB,OAIZ,uBAAMwB,SAAUrB,EAAhB,UACE,uBAAOsB,MAAO3B,EAAW4B,SAAU,SAACtB,GAAOL,EAAaK,EAAEuB,OAAOF,UADnE,IAEE,wBAAQG,KAAM,SAAUC,UAAW/B,EAAnC,uCAMFgC,EAAc,SAACC,GAAW,IAAD,EACCA,EAAMV,QAA7BX,EADsB,EACtBA,KAAMH,EADgB,EAChBA,IAAKC,EADW,EACXA,SAEZwB,EAAezB,IAAQ9B,EAAKS,YAAYqB,IAAM,OAAS,WAE7D,OAEE,cADA,CACA,OAAK0B,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAK1B,IACV,4BAAIE,QAKKyB,EA5FH,WAAO,IAAD,EACDC,YAAa3D,GAArB4D,EADS,oBAEhB,OACE,sBAAKJ,UAAU,MAAf,UACE,mCACE,sEACA,cAAC,EAAD,OAEF,kCAEGI,EAAO,cAAC,EAAD,IAAc,cAAC,EAAD,UCjCfC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d5a53325.chunk.js","sourcesContent":["import React , {useState, useRef} from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst {\n  apiKey,\n  authDomain,\n  projectId,\n  storageBucket,\n  messagingSenderId,\n  appId,\n  measurementId\n} = require(\"./env.json\");\n\nfirebase.initializeApp({\n  apiKey: apiKey,\n  authDomain: authDomain,\n  projectId: projectId,\n  storageBucket: storageBucket,\n  messagingSenderId: messagingSenderId,\n  appId: appId,\n  measurementId: measurementId\n})\n\nconst auth = firebase.auth();\nconst firestore= firebase.firestore();\n\nconst Filter = require('bad-words');\n\nconst App = () => {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n      <section>\n        {/* if a user is signed in auth */}\n        {user ? <ChatRoom/> : <SignIn/>} \n      </section>\n    </div>\n  );\n}\n\nconst SignIn = ()=>{\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider(); //google auth popup\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <>\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n      {/* <p>Do not violate the community guidelines or you will be banned for life!</p> */}\n    </>\n  )\n}\n\nconst SignOut = () => {\n  return auth.currentUser && (\n    <button onClick= {() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nconst ChatRoom = () =>{\n  const messagesRef = firestore.collection('messages'); // gets collection from database called messages\n  const query = messagesRef.orderBy('createdAt').limit(25); //orders collection of objects by createdAt key\n\n  const [messages] = useCollectionData(query, {idField: 'id'}); //listens on real-time to data with a hook and gets the collection\n  const [formValue, setFormValue] = useState(''); //react's state hook that changes its value real-time\n  const dummy = useRef() //react's ref hook, so window will always have refernce in view (to auto-scroll chat)\n\n  const filter = new Filter(); //filters out bad words\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser; //user's google uid and profile image\n\n    await messagesRef.add({ //adds new message to collection on firestone\n      text: filter.isProfane(formValue) ? filter.clean(formValue) : formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue(''); //resets chat input field\n\n    dummy.current.scrollIntoView({behavior: 'smooth'}); //scroll down\n  }\n\n  return (\n    <>\n      {/* chat */}\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n        <div ref={dummy}></div>\n      </main>\n\n      {/* chat input */}\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => {setFormValue(e.target.value);}}/> {/* bind hook to form input */}\n        <button type={\"subnit\"} disabled={!formValue}>üïäÔ∏è</button>\n      </form>\n    </>\n  )\n}\n\nconst ChatMessage = (props) => {\n  const {text, uid, photoURL} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    // different style depending on sent or received className\n    <div className={`message ${messageClass}`}> \n      <img src={photoURL}/>\n      <p>{text}</p>\n    </div>\n  ) \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}